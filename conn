import pandas as pd
import os
import json
import concurrent.futures

# --- Load schema ---
schema_path = 'C:/Users/8216609/OneDrive - Standard Chartered Bank/Documents/VSCode/Project1/Output/schemas.json'
schemas = json.load(open(schema_path))
cdr = "Caller Details"
column_details = schemas[cdr]
column_name = list(map(lambda col: col["column_name"], column_details))

# --- Configuration ---
folder_path = os.path.abspath("C:/Users/8216609/OneDrive - Standard Chartered Bank/Desktop/India CDR/2025/Mar'25")
output_file = os.path.abspath('combined_output.csv')
rows_to_skip = 6

# List of Excel files
file_list = [f for f in os.listdir(folder_path) if f.endswith('.xlsx') or f.endswith('.xls')]

if not file_list:
    print("‚ùå No Excel files found.")
else:
    print(f"‚úÖ Found {len(file_list)} files. Processing...\n")

# --- Worker function to process one file ---
def process_file(file):
    ext = os.path.splitext(file)[1].lower()
    file_path = os.path.join(folder_path, file)

    try:
        if ext == ".xlsx":
            df = pd.read_excel(file_path, skiprows=rows_to_skip, header=None, engine='openpyxl')
        elif ext == ".xls":
            raw_data = pd.read_csv(file_path, skiprows=rows_to_skip, header=None, usecols=[1])
            df_split = raw_data.iloc[:, 0].astype(str).str.split('\t', expand=True)
            df = df_split.drop(0)
        else:
            return None

        # Assign schema-based columns
        df.columns = column_name[:df.shape[1]]
        df['Source File'] = file
        return df

    except Exception as e:
        print(f"‚ùå Error in file {file}: {e}")
        return None

# --- Parallel Processing ---
all_dataframes = []

with concurrent.futures.ThreadPoolExecutor() as executor:
    results = executor.map(process_file, file_list)
    for df in results:
        if df is not None:
            all_dataframes.append(df)

# --- Concatenate and save ---
if all_dataframes:
    final_df = pd.concat(all_dataframes, ignore_index=True)
    final_df.to_csv(output_file, index=False)
    print(f"\nüéâ Successfully combined all files into:\n{output_file}")
else:
    print("‚ö†Ô∏è No valid data found to combine.")
